// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/31/2021 13:49:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_module_vlg_sample_tst(
	clear,
	clk,
	Ent,
	IN,
	OUT,
	T,
	sampler_tx
);
input  clear;
input  clk;
input  Ent;
input  IN;
input  OUT;
input  T;
output sampler_tx;

reg sample;
time current_time;
always @(clear or clk or Ent or IN or OUT or T)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_module_vlg_check_tst (
	close,
	open,
	test0,
	test1,
	test2,
	test3,
	sampler_rx
);
input  close;
input  open;
input  test0;
input  test1;
input  test2;
input  test3;
input sampler_rx;

reg  close_expected;
reg  open_expected;
reg  test0_expected;
reg  test1_expected;
reg  test2_expected;
reg  test3_expected;

reg  close_prev;
reg  open_prev;
reg  test0_prev;
reg  test1_prev;
reg  test2_prev;
reg  test3_prev;

reg  close_expected_prev;
reg  open_expected_prev;
reg  test0_expected_prev;
reg  test1_expected_prev;
reg  test2_expected_prev;
reg  test3_expected_prev;

reg  last_close_exp;
reg  last_open_exp;
reg  last_test0_exp;
reg  last_test1_exp;
reg  last_test2_exp;
reg  last_test3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	close_prev = close;
	open_prev = open;
	test0_prev = test0;
	test1_prev = test1;
	test2_prev = test2;
	test3_prev = test3;
end

// update expected /o prevs

always @(trigger)
begin
	close_expected_prev = close_expected;
	open_expected_prev = open_expected;
	test0_expected_prev = test0_expected;
	test1_expected_prev = test1_expected;
	test2_expected_prev = test2_expected;
	test3_expected_prev = test3_expected;
end



// expected open
initial
begin
	open_expected = 1'bX;
end 

// expected close
initial
begin
	close_expected = 1'bX;
end 

// expected test3
initial
begin
	test3_expected = 1'bX;
end 

// expected test2
initial
begin
	test2_expected = 1'bX;
end 

// expected test1
initial
begin
	test1_expected = 1'bX;
end 

// expected test0
initial
begin
	test0_expected = 1'bX;
end 
// generate trigger
always @(close_expected or close or open_expected or open or test0_expected or test0 or test1_expected or test1 or test2_expected or test2 or test3_expected or test3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected close = %b | expected open = %b | expected test0 = %b | expected test1 = %b | expected test2 = %b | expected test3 = %b | ",close_expected_prev,open_expected_prev,test0_expected_prev,test1_expected_prev,test2_expected_prev,test3_expected_prev);
	$display("| real close = %b | real open = %b | real test0 = %b | real test1 = %b | real test2 = %b | real test3 = %b | ",close_prev,open_prev,test0_prev,test1_prev,test2_prev,test3_prev);
`endif
	if (
		( close_expected_prev !== 1'bx ) && ( close_prev !== close_expected_prev )
		&& ((close_expected_prev !== last_close_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port close :: @time = %t",  $realtime);
		$display ("     Expected value = %b", close_expected_prev);
		$display ("     Real value = %b", close_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_close_exp = close_expected_prev;
	end
	if (
		( open_expected_prev !== 1'bx ) && ( open_prev !== open_expected_prev )
		&& ((open_expected_prev !== last_open_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port open :: @time = %t",  $realtime);
		$display ("     Expected value = %b", open_expected_prev);
		$display ("     Real value = %b", open_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_open_exp = open_expected_prev;
	end
	if (
		( test0_expected_prev !== 1'bx ) && ( test0_prev !== test0_expected_prev )
		&& ((test0_expected_prev !== last_test0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test0_expected_prev);
		$display ("     Real value = %b", test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test0_exp = test0_expected_prev;
	end
	if (
		( test1_expected_prev !== 1'bx ) && ( test1_prev !== test1_expected_prev )
		&& ((test1_expected_prev !== last_test1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test1_exp = test1_expected_prev;
	end
	if (
		( test2_expected_prev !== 1'bx ) && ( test2_prev !== test2_expected_prev )
		&& ((test2_expected_prev !== last_test2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_test2_exp = test2_expected_prev;
	end
	if (
		( test3_expected_prev !== 1'bx ) && ( test3_prev !== test3_expected_prev )
		&& ((test3_expected_prev !== last_test3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_test3_exp = test3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clk;
reg Ent;
reg IN;
reg OUT;
reg T;
// wires                                               
wire close;
wire open;
wire test0;
wire test1;
wire test2;
wire test3;

wire sampler;                             

// assign statements (if any)                          
top_module i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.clk(clk),
	.close(close),
	.Ent(Ent),
	.IN(IN),
	.open(open),
	.OUT(OUT),
	.T(T),
	.test0(test0),
	.test1(test1),
	.test2(test2),
	.test3(test3)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// IN
initial
begin
	IN = 1'b0;
	IN = #2000 1'b1;
	IN = #36000 1'b0;
	IN = #6000 1'b1;
end 

// Ent
initial
begin
	Ent = 1'b0;
	Ent = #2000 1'b1;
	Ent = #36000 1'b0;
	Ent = #8000 1'b1;
end 

// OUT
initial
begin
	OUT = 1'b0;
	OUT = #38000 1'b1;
end 

// T
initial
begin
	T = 1'b0;
	T = #6000 1'b1;
end 

// clear
initial
begin
	clear = 1'b0;
	clear = #2000 1'b1;
end 

top_module_vlg_sample_tst tb_sample (
	.clear(clear),
	.clk(clk),
	.Ent(Ent),
	.IN(IN),
	.OUT(OUT),
	.T(T),
	.sampler_tx(sampler)
);

top_module_vlg_check_tst tb_out(
	.close(close),
	.open(open),
	.test0(test0),
	.test1(test1),
	.test2(test2),
	.test3(test3),
	.sampler_rx(sampler)
);
endmodule

